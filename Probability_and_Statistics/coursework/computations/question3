#!/usr/bin/env python
import numpy as np
import math
from math import log
from math import floor
import matplotlib.pyplot as plt

def FXinverse(x, lamb):
    return (1 - x) ** (1 / (1 - lamb))

def getSample(transformFunction, aux):
    u = np.random.rand()
    return transformFunction(u, aux)


def average(X): 
    return 1 / len(X) * sum(X)

def estimateLambda(n, lamb):
    samples = []
    for i in range (n):
        samples.append(log(getSample(FXinverse, lamb)))

    return (average(samples)) ** (-1) + 1

def computeExperimentSample(n, lamb):
    estimates = []
    for i in range (10 ** 4):
        estimates.append(estimateLambda(n, lamb))
    return estimates

def getRejectionRegion(sample, level):
    sample.sort()
    #offset = floor(len(sample) * level / 2)
    #return [sample[offset], sample[len(sample) - offset]]
    return sample[9500]

def getPower(sample2, rejectionBound):
    rejectionRegionHits = 0
    for data in sample2:
        if data >= rejectionBound:
            rejectionRegionHits += 1

    return rejectionRegionHits / len(sample2)

def runTest(data):
    data2 = []
    for x in data:
        data2.append(log(x))

    return (average(data2)) ** (-1) + 1


def getPValue(estimate, samples):
    #estimate has to be to the left of the mean of the distribution
    greaterCounter = 0
    for x in samples:
        if x >= estimate:
            greaterCounter += 1

    return greaterCounter / len(samples)

    


def plot(sample1, sample2, sample3):
    firstBinBounds = []
    for i in range(90):
        firstBinBounds.append(1 + 0.1 * i)

    secondBinBounds = []
    for i in range(45):
        secondBinBounds.append(1 + 0.2 * i)

    plt.figure(figsize=(10,8))
    plt.hist(sample1, bins=firstBinBounds, histtype="step", label=r"$(n, \lambda) = (10,2)$")
    plt.hist(sample3, bins=firstBinBounds, histtype="step", label=r"$(n, \lambda) = (50,4)$")
    plt.hist(sample2, bins=secondBinBounds, histtype="step", label=r"$(n, \lambda) = (10,4)$")
    plt.axvline(2, label=r"$\lambda$ = 2", color="red")
    plt.axvline(4, label=r"$\lambda$ = 4")
    plt.title("Density histograms for different sampling distributions")

    plt.xlabel("Value of the estimate", fontsize="15")
    plt.ylabel("Frequency", fontsize="15")
    leg = plt.legend()
    
    plt.show()

def main():
    sample1 = computeExperimentSample(10, 2)
    sample2 = computeExperimentSample(10, 4)
    sample3 = computeExperimentSample(50, 4)
    print(sample1)

    print(getRejectionRegion(sample1, 0.05))
    print(getPower(sample2, getRejectionRegion(sample1, 0.05)))

    data = [1.00, 1.06, 15.69, 1.09, 4.04, 2.20, 2.28, 1.10, 1.46, 1.47]
    print(runTest(data))
    print(getPValue(runTest(data), sample1))
    #print(getPValue(1.75, sample1))
    plot(sample1, sample2, sample3)

    
if __name__ == main():
    main()


