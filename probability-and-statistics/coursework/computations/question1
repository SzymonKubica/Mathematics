#!/usr/bin/env python

import numpy as np
from math import exp
from math import pi
from math import sqrt
from scipy import stats
import matplotlib.pyplot as plt

def g(x):
    return exp(-1 * (x ** 4))

def f(x):
    return (1 / sqrt(2 * pi)) * exp ((-1 / 2) * (x ** 2)) 

def f2(x, sigma):
    return (1 / (sqrt(2 * pi) * sigma)) * exp ((-1 / 2) * ((x / sigma) ** 2)) 

def W(X):
    return sum(transform(X, weight)) / len(X)

def W2(X, sigma):
    return sum(transformAux(X, weightAux, sigma)) / len(X)

def weight(x):
    return g(x) / f(x)

def weightAux(x, aux):
    return g(x) / f2(x, aux)

def transform(X, func):
    X2 = []
    for x in X:
        X2.append(func(x))
    return X2

def transformAux(X, func, aux):
    X2 = []
    for x in X:
        X2.append(func(x, aux))
    return X2

def exportData(samples):
    header = "1-5 6-10 11-15 16-20"

    dataOut = np.column_stack((samples[:5], samples[5:10], samples[10:15], samples[15:20]))
    np.savetxt("samples.dat", dataOut, fmt = ("%1.3f", "%1.3f", "%1.3f", "%1.3f"), header = header)

def sum(X):
    sum = 0
    for x in X:
        sum += x
    return sum

def mean(X):
    return sum(X) / len(X)

def varianceHelper(x, mean):
    return (x - mean) ** 2

def biasCorrectedSampleVariance(X):
    n = len(X)
    return 1 / (n - 1) * sum(transformAux(X, varianceHelper, mean(X)))

# Finding the confidence interval:
def confidenceInterval(X, Studentt, alpha):
    n = len(X)
    delta = abs(Studentt(n - 1, 1 - alpha / 2) * ((biasCorrectedSampleVariance(X)) / sqrt(n)))
    return [W(X) - delta, W(X) + delta]

def Studentt(v, quantile):
    return stats.t(df=v).ppf(quantile)

def plot1():
    sigmas = []
    integralEstimates = []
    #confidenceIntervals = [[],[]]
    confidenceIntervals = []
    for i in range (1, 11):
        sigma = 0.5 * i 
        sigmas.append(sigma)
        #sample = np.random.normal(0.0, sigma, 20)
        sample = sigma * np.random.randn(20)
        estimate = W2(sample, sigma)
        integralEstimates.append(estimate)
        confidenceIntervals.append(abs(estimate - confidenceInterval(sample, Studentt, 0.05)[0]))
        #confidenceIntervals[1].append(abs(estimate - confidenceInterval(sample, Studentt, 0.05)[1]))

    
    print(sigmas)
    print(integralEstimates)
    #for i in range (10):
     #   print (f"{confidenceIntervals[0][i]} {confidenceIntervals[1][i]}")

    plt.rcParams.update({"font.size": 22})
    plt.figure(figsize=[11, 11])
    plt.ylim([-10,13])
    plt.ylabel("I")
    plt.xlabel(r"$\sigma$")
    plt.title(r"Estimate of $I$ vs standard deviation $\sigma$ of source distribution")
    plt.hlines(1.81280, 0, 5, label="I = 1.81280")
    plt.errorbar(sigmas, integralEstimates, yerr=confidenceIntervals, linewidth=2.0, fmt="none", color="green")
    plt.scatter(sigmas, integralEstimates, 50, marker='o', color='red')
    leg = plt.legend(loc="upper left")
    plt.show()

def sd(X):
    return sqrt((sum(transformAux(X, varianceHelper, mean(X)))) / len(X))

def plot2():
    standardDeviations = []
    xValues = []
    for k in range (3, 13):
        xValues.append(2 ** k)
        estimates = []
        for i in range (100):
            sample = np.random.randn(2 ** k)
            estimates.append(W(sample))

        standardDeviations.append(sd(estimates))

    plt.rcParams.update({"font.size": 22})
    plt.loglog(xValues, standardDeviations, base=2, marker="o", markersize=10) 
    x = np.linspace(2 ** 3, 2 ** 12, 1000)
    plt.plot(x, standardDeviations[0] * ((x / 8) ** ((-1) / 2)), label=r"$y = \sigma_{n=8}\left( \frac{n}{8} \right)^\lambda$")
    plt.xlabel(r"Value of $n$")
    plt.ylabel(r"$\sigma$ of 100 estimates")
    plt.title(r"$\sigma$ of 100 estimates of $I$ vs sample size $n$ (log-log plot)")
    leg = plt.legend(loc="upper right")
    plt.show()
            
            




def main():
    samples = np.random.randn(20)
    print(samples)
    print(W2(samples, 1))
    print(biasCorrectedSampleVariance(samples))
    print(confidenceInterval(samples, Studentt, 0.05))
    exportData(samples)
    #plot1()
    plot2()



    



if __name__ == main():
    main()
